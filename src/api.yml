swagger: "2.0"
info:
  title: Road Traffic Survey APIs
  description: API documentation for Road Traffic Survey Management System
  version: 1.0.0
  contact:
    email: support@roadtrafficsurvey.com
  license:
    name: MIT
    url: "https://opensource.org/licenses/MIT"

host: ${API_HOST:-localhost:5000}
basePath: /
schemes: [http, https]

securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
    description: >-
      Enter the token with the `Bearer: ` prefix, e.g. "Bearer abcde12345"

paths:
  /api/health:
    get:
      tags:
        - Health Check
      summary: Health Check Endpoint
      description: Returns server status to verify if the server is running
      responses:
        200:
          description: Server is running successfully
          schema:
            type: string
            example: "Status Ok!!!!!!"

  # Authentication Routes
  /api/auth/forgot_password:
    post:
      tags:
        - Authentication
      summary: Forgot Password
      description: Send forgot password code to the user's email
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address
                example: "user@example.com"
      responses:
        200:
          description: Password reset code sent successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Password reset code sent to your email"
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Internal server error

  /api/auth/reset_password:
    post:
      tags:
        - Authentication
      summary: Reset Password
      description: Reset user password using the reset code
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address
                example: "user@example.com"
              reset_code:
                type: string
                description: Reset code received via email
                example: "123456"
              new_password:
                type: string
                description: New password
                example: "newPassword123"
      responses:
        200:
          description: Password reset successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Password reset successfully"
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Internal server error

  /api/auth/resend_code:
    post:
      tags:
        - Authentication
      summary: Resend Reset Code
      description: Resend password reset code to user's email
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address
                example: "user@example.com"
      responses:
        200:
          description: Reset code resent successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Reset code resent to your email"
        400:
          description: Bad request
        404:
          description: User not found
        500:
          description: Internal server error

  # User Management Routes
  /api/users/email_signup:
    post:
      tags:
        - User Management
      summary: User Registration
      description: Register a new user with email
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address
                example: "user@example.com"
              password:
                type: string
                description: User's password
                example: "password123"
              full_name:
                type: string
                description: User's full name
                example: "John Doe"
              phone:
                type: string
                description: User's phone number
                example: "+1234567890"
      responses:
        201:
          description: User registered successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "User registered successfully"
              user_id:
                type: string
                example: "507f1f77bcf86cd799439011"
        400:
          description: Bad request
        409:
          description: User already exists
        500:
          description: Internal server error

  /api/users/email_login:
    post:
      tags:
        - User Management
      summary: User Login
      description: Authenticate user with email and password
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                description: User's email address
                example: "user@example.com"
              password:
                type: string
                description: User's password
                example: "password123"
      responses:
        200:
          description: Login successful
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Login successful"
              token:
                type: string
                example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              user:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  email:
                    type: string
                    example: "user@example.com"
                  full_name:
                    type: string
                    example: "John Doe"
        400:
          description: Bad request
        401:
          description: Invalid credentials
        500:
          description: Internal server error



  /api/users/list:
    get:
      tags:
        - User Management
      summary: Get Users List
      description: Retrieve list of users (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          type: integer
          description: Number of items per page
          example: 10
        - in: query
          name: search
          type: string
          description: Search term for filtering users
          example: "john"
      responses:
        200:
          description: Users list retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    email:
                      type: string
                      example: "user@example.com"
                    full_name:
                      type: string
                      example: "John Doe"
                    phone:
                      type: string
                      example: "+1234567890"
                    created_at:
                      type: string
                      format: date-time
                      example: "2023-01-01T00:00:00.000Z"
              pagination:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 100
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/users/details:
    get:
      tags:
        - User Management
      summary: Get User Details
      description: Retrieve current user's details (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: User details retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              user:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  email:
                    type: string
                    example: "user@example.com"
                  full_name:
                    type: string
                    example: "John Doe"
                  phone:
                    type: string
                    example: "+1234567890"
                  role:
                    type: string
                    example: "user"
                  created_at:
                    type: string
                    format: date-time
                    example: "2023-01-01T00:00:00.000Z"
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/users/update:
    put:
      tags:
        - User Management
      summary: Update User Profile
      description: Update current user's profile information (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              full_name:
                type: string
                description: User's full name
                example: "John Doe Updated"
              phone:
                type: string
                description: User's phone number
                example: "+1234567890"
              address:
                type: string
                description: User's address
                example: "123 Main St, City, State"
      responses:
        200:
          description: User profile updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Profile updated successfully"
              user:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  email:
                    type: string
                    example: "user@example.com"
                  full_name:
                    type: string
                    example: "John Doe Updated"
                  phone:
                    type: string
                    example: "+1234567890"
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/users/delete:
    delete:
      tags:
        - User Management
      summary: Delete User Account
      description: Delete current user's account (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: User account deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Account deleted successfully"
        401:
          description: Unauthorized
        500:
          description: Internal server error



  /api/users/logout:
    get:
      tags:
        - User Management
      summary: User Logout
      description: Logout current user (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      responses:
        200:
          description: Logout successful
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Logout successful"
        401:
          description: Unauthorized
        500:
          description: Internal server error

  # Role Management Routes
  /api/role/create:
    post:
      tags:
        - Role Management
      summary: Create Role
      description: Create a new role (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Role name
                example: "surveyor"
              description:
                type: string
                description: Role description
                example: "Traffic surveyor role"
              permissions:
                type: array
                items:
                  type: string
                description: Array of permission IDs
                example: ["507f1f77bcf86cd799439011"]
      responses:
        201:
          description: Role created successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Role created successfully"
              role:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "surveyor"
                  description:
                    type: string
                    example: "Traffic surveyor role"
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/role/all:
    get:
      tags:
        - Role Management
      summary: Get All Roles
      description: Retrieve list of all roles (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          type: integer
          description: Number of items per page
          example: 10
      responses:
        200:
          description: Roles list retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    name:
                      type: string
                      example: "surveyor"
                    description:
                      type: string
                      example: "Traffic surveyor role"
                    permissions:
                      type: array
                      items:
                        type: string
                      example: ["507f1f77bcf86cd799439011"]
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/role/details:
    get:
      tags:
        - Role Management
      summary: Get Role Details
      description: Retrieve specific role details (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: role_id
          type: string
          required: true
          description: Role ID
          example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Role details retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              role:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "surveyor"
                  description:
                    type: string
                    example: "Traffic surveyor role"
                  permissions:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "507f1f77bcf86cd799439011"
                        name:
                          type: string
                          example: "create_survey"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Role not found
        500:
          description: Internal server error

  /api/role/update:
    put:
      tags:
        - Role Management
      summary: Update Role
      description: Update existing role (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              role_id:
                type: string
                required: true
                description: Role ID to update
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                description: New role name
                example: "senior_surveyor"
              description:
                type: string
                description: New role description
                example: "Senior traffic surveyor role"
      responses:
        200:
          description: Role updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Role updated successfully"
              role:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "senior_surveyor"
                  description:
                    type: string
                    example: "Senior traffic surveyor role"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Role not found
        500:
          description: Internal server error

  /api/role/delete:
    delete:
      tags:
        - Role Management
      summary: Delete Role
      description: Delete a role (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: role_id
          type: string
          required: true
          description: Role ID to delete
          example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Role deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Role deleted successfully"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Role not found
        500:
          description: Internal server error

  /api/role/add/permission:
    put:
      tags:
        - Role Management
      summary: Add Permission to Role
      description: Add permissions to an existing role (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              role_id:
                type: string
                required: true
                description: Role ID
                example: "507f1f77bcf86cd799439011"
              permission_ids:
                type: array
                items:
                  type: string
                required: true
                description: Array of permission IDs to add
                example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
      responses:
        200:
          description: Permissions added to role successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Permissions added to role successfully"
              role:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "surveyor"
                  permissions:
                    type: array
                    items:
                      type: string
                    example: ["507f1f77bcf86cd799439011", "507f1f77bcf86cd799439012"]
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Role not found
        500:
          description: Internal server error

  # Permission Management Routes
  /api/permission/create:
    post:
      tags:
        - Permission Management
      summary: Create Permission
      description: Create a new permission (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              name:
                type: string
                description: Permission name
                example: "create_survey"
              description:
                type: string
                description: Permission description
                example: "Permission to create traffic surveys"
              resource:
                type: string
                description: Resource this permission applies to
                example: "survey"
              action:
                type: string
                description: Action allowed by this permission
                example: "create"
      responses:
        201:
          description: Permission created successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Permission created successfully"
              permission:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "create_survey"
                  description:
                    type: string
                    example: "Permission to create traffic surveys"
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/permission/update:
    put:
      tags:
        - Permission Management
      summary: Update Permission
      description: Update existing permission (requires authentication)
      security:
        - Bearer: []
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              permission_id:
                type: string
                required: true
                description: Permission ID to update
                example: "507f1f77bcf86cd799439011"
              name:
                type: string
                description: New permission name
                example: "create_traffic_survey"
              description:
                type: string
                description: New permission description
                example: "Permission to create traffic surveys"
      responses:
        200:
          description: Permission updated successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Permission updated successfully"
              permission:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "create_traffic_survey"
                  description:
                    type: string
                    example: "Permission to create traffic surveys"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Permission not found
        500:
          description: Internal server error

  /api/permission/admin/list:
    get:
      tags:
        - Permission Management
      summary: Get Admin Permission List
      description: Retrieve list of admin permissions (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          type: integer
          description: Number of items per page
          example: 10
      responses:
        200:
          description: Admin permissions list retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    name:
                      type: string
                      example: "manage_users"
                    description:
                      type: string
                      example: "Permission to manage users"
                    resource:
                      type: string
                      example: "user"
                    action:
                      type: string
                      example: "manage"
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/permission/delete:
    delete:
      tags:
        - Permission Management
      summary: Delete Permission
      description: Delete a permission (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: permission_id
          type: string
          required: true
          description: Permission ID to delete
          example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Permission deleted successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              message:
                type: string
                example: "Permission deleted successfully"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Permission not found
        500:
          description: Internal server error

  /api/permission/details:
    get:
      tags:
        - Permission Management
      summary: Get Permission Details
      description: Retrieve specific permission details (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: permission_id
          type: string
          required: true
          description: Permission ID
          example: "507f1f77bcf86cd799439011"
      responses:
        200:
          description: Permission details retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              permission:
                type: object
                properties:
                  id:
                    type: string
                    example: "507f1f77bcf86cd799439011"
                  name:
                    type: string
                    example: "create_survey"
                  description:
                    type: string
                    example: "Permission to create traffic surveys"
                  resource:
                    type: string
                    example: "survey"
                  action:
                    type: string
                    example: "create"
                  created_at:
                    type: string
                    format: date-time
                    example: "2023-01-01T00:00:00.000Z"
        400:
          description: Bad request
        401:
          description: Unauthorized
        404:
          description: Permission not found
        500:
          description: Internal server error

  /api/permission/search:
    get:
      tags:
        - Permission Management
      summary: Search Permissions
      description: Search permissions by name or description (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: q
          type: string
          required: true
          description: Search query
          example: "survey"
        - in: query
          name: page
          type: integer
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          type: integer
          description: Number of items per page
          example: 10
      responses:
        200:
          description: Permissions search results
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    name:
                      type: string
                      example: "create_survey"
                    description:
                      type: string
                      example: "Permission to create traffic surveys"
              pagination:
                type: object
                properties:
                  page:
                    type: integer
                    example: 1
                  limit:
                    type: integer
                    example: 10
                  total:
                    type: integer
                    example: 5
        400:
          description: Bad request
        401:
          description: Unauthorized
        500:
          description: Internal server error

  /api/permission/merchant/list:
    get:
      tags:
        - Permission Management
      summary: Get Merchant Permission List
      description: Retrieve list of merchant permissions (requires authentication)
      security:
        - Bearer: []
      produces:
        - application/json
      parameters:
        - in: query
          name: page
          type: integer
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          type: integer
          description: Number of items per page
          example: 10
      responses:
        200:
          description: Merchant permissions list retrieved successfully
          schema:
            type: object
            properties:
              success:
                type: boolean
                example: true
              data:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "507f1f77bcf86cd799439011"
                    name:
                      type: string
                      example: "view_survey"
                    description:
                      type: string
                      example: "Permission to view surveys"
                    resource:
                      type: string
                      example: "survey"
                    action:
                      type: string
                      example: "view"
        401:
          description: Unauthorized
        500:
          description: Internal server error

# Definitions for common data models
definitions:
  User:
    type: object
    properties:
      id:
        type: string
        example: "507f1f77bcf86cd799439011"
      email:
        type: string
        format: email
        example: "user@example.com"
      full_name:
        type: string
        example: "John Doe"
      phone:
        type: string
        example: "+1234567890"
      role:
        type: string
        example: "user"
      address:
        type: string
        example: "123 Main St, City, State"
      created_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"
      updated_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"

  Role:
    type: object
    properties:
      id:
        type: string
        example: "507f1f77bcf86cd799439011"
      name:
        type: string
        example: "surveyor"
      description:
        type: string
        example: "Traffic surveyor role"
      permissions:
        type: array
        items:
          type: string
        example: ["507f1f77bcf86cd799439011"]
      created_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"
      updated_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"

  Permission:
    type: object
    properties:
      id:
        type: string
        example: "507f1f77bcf86cd799439011"
      name:
        type: string
        example: "create_survey"
      description:
        type: string
        example: "Permission to create traffic surveys"
      resource:
        type: string
        example: "survey"
      action:
        type: string
        example: "create"
      created_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"
      updated_at:
        type: string
        format: date-time
        example: "2023-01-01T00:00:00.000Z"

  Error:
    type: object
    properties:
      success:
        type: boolean
        example: false
      message:
        type: string
        example: "Error message"
      error:
        type: string
        example: "Validation error"
      code:
        type: integer
        example: 400

  Success:
    type: object
    properties:
      success:
        type: boolean
        example: true
      message:
        type: string
        example: "Operation completed successfully"
      data:
        type: object
        description: Response data (varies by endpoint)